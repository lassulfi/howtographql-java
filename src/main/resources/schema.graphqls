type Link {
  id: String!
  url: String!
  description: String!
  postedBy: User!
}

type Query {
  allLinks(filter: LinkFilter, skip: Int = 0, first: Int = 0): [Link]
}

type Mutation {
    createUser(name: String!, authProvider: AuthData!): User
    createLink(url: String!, description: String!): Link
    signinUser(auth: AuthData!): SigninPayLoad
    createVote(linkId: String!, userId: String!): Vote!
}

type User {
  id: String!
  name: String!
  email: String!
  password: String!
}

type Vote {
 id: String!
 createdAt: DateTime!
 user: User!
 link: Link!
}

type SigninPayLoad {
  token: String!
  user: User!
}

input AuthData {
  email: String!
  password: String!
}

input LinkFilter {
  description_contains: String!
  url_contains: String!
}

schema {
    query: Query
    mutation: Mutation
}

scalar DateTime